/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <GazeboYarpPlugins/WorldInterfaceServer.h>

#include <yarp/os/idl/WireTypes.h>

namespace GazeboYarpPlugins {

class WorldInterfaceServer_makeSphere_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_makeSphere_helper(const double radius, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_radius;
    Pose m_pose;
    Color m_color;
    std::string m_frame_name;
    std::string m_object_name;
    bool m_gravity_enable;
    bool m_collision_enable;

    thread_local static std::string s_return_helper;
};

thread_local std::string WorldInterfaceServer_makeSphere_helper::s_return_helper = {};

WorldInterfaceServer_makeSphere_helper::WorldInterfaceServer_makeSphere_helper(const double radius, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable) :
        m_radius{radius},
        m_pose{pose},
        m_color{color},
        m_frame_name{frame_name},
        m_object_name{object_name},
        m_gravity_enable{gravity_enable},
        m_collision_enable{collision_enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_makeSphere_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(15)) {
        return false;
    }
    if (!writer.writeTag("makeSphere", 1, 1)) {
        return false;
    }
    if (!writer.writeFloat64(m_radius)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.write(m_color)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    if (!writer.writeString(m_object_name)) {
        return false;
    }
    if (!writer.writeBool(m_gravity_enable)) {
        return false;
    }
    if (!writer.writeBool(m_collision_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_makeSphere_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_makeBox_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_makeBox_helper(const double width, const double height, const double thickness, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_width;
    double m_height;
    double m_thickness;
    Pose m_pose;
    Color m_color;
    std::string m_frame_name;
    std::string m_object_name;
    bool m_gravity_enable;
    bool m_collision_enable;

    thread_local static std::string s_return_helper;
};

thread_local std::string WorldInterfaceServer_makeBox_helper::s_return_helper = {};

WorldInterfaceServer_makeBox_helper::WorldInterfaceServer_makeBox_helper(const double width, const double height, const double thickness, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable) :
        m_width{width},
        m_height{height},
        m_thickness{thickness},
        m_pose{pose},
        m_color{color},
        m_frame_name{frame_name},
        m_object_name{object_name},
        m_gravity_enable{gravity_enable},
        m_collision_enable{collision_enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_makeBox_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(17)) {
        return false;
    }
    if (!writer.writeTag("makeBox", 1, 1)) {
        return false;
    }
    if (!writer.writeFloat64(m_width)) {
        return false;
    }
    if (!writer.writeFloat64(m_height)) {
        return false;
    }
    if (!writer.writeFloat64(m_thickness)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.write(m_color)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    if (!writer.writeString(m_object_name)) {
        return false;
    }
    if (!writer.writeBool(m_gravity_enable)) {
        return false;
    }
    if (!writer.writeBool(m_collision_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_makeBox_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_makeCylinder_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_makeCylinder_helper(const double radius, const double length, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_radius;
    double m_length;
    Pose m_pose;
    Color m_color;
    std::string m_frame_name;
    std::string m_object_name;
    bool m_gravity_enable;
    bool m_collision_enable;

    thread_local static std::string s_return_helper;
};

thread_local std::string WorldInterfaceServer_makeCylinder_helper::s_return_helper = {};

WorldInterfaceServer_makeCylinder_helper::WorldInterfaceServer_makeCylinder_helper(const double radius, const double length, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable) :
        m_radius{radius},
        m_length{length},
        m_pose{pose},
        m_color{color},
        m_frame_name{frame_name},
        m_object_name{object_name},
        m_gravity_enable{gravity_enable},
        m_collision_enable{collision_enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_makeCylinder_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(16)) {
        return false;
    }
    if (!writer.writeTag("makeCylinder", 1, 1)) {
        return false;
    }
    if (!writer.writeFloat64(m_radius)) {
        return false;
    }
    if (!writer.writeFloat64(m_length)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.write(m_color)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    if (!writer.writeString(m_object_name)) {
        return false;
    }
    if (!writer.writeBool(m_gravity_enable)) {
        return false;
    }
    if (!writer.writeBool(m_collision_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_makeCylinder_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_makeFrame_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_makeFrame_helper(const double size, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    double m_size;
    Pose m_pose;
    Color m_color;
    std::string m_frame_name;
    std::string m_object_name;
    bool m_gravity_enable;
    bool m_collision_enable;

    thread_local static std::string s_return_helper;
};

thread_local std::string WorldInterfaceServer_makeFrame_helper::s_return_helper = {};

WorldInterfaceServer_makeFrame_helper::WorldInterfaceServer_makeFrame_helper(const double size, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable) :
        m_size{size},
        m_pose{pose},
        m_color{color},
        m_frame_name{frame_name},
        m_object_name{object_name},
        m_gravity_enable{gravity_enable},
        m_collision_enable{collision_enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_makeFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(15)) {
        return false;
    }
    if (!writer.writeTag("makeFrame", 1, 1)) {
        return false;
    }
    if (!writer.writeFloat64(m_size)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.write(m_color)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    if (!writer.writeString(m_object_name)) {
        return false;
    }
    if (!writer.writeBool(m_gravity_enable)) {
        return false;
    }
    if (!writer.writeBool(m_collision_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_makeFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_changeColor_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_changeColor_helper(const std::string& id, const Color& color);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    Color m_color;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_changeColor_helper::s_return_helper = {};

WorldInterfaceServer_changeColor_helper::WorldInterfaceServer_changeColor_helper(const std::string& id, const Color& color) :
        m_id{id},
        m_color{color}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_changeColor_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("changeColor", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.write(m_color)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_changeColor_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_setPose_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_setPose_helper(const std::string& id, const Pose& pose, const std::string& frame_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    Pose m_pose;
    std::string m_frame_name;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_setPose_helper::s_return_helper = {};

WorldInterfaceServer_setPose_helper::WorldInterfaceServer_setPose_helper(const std::string& id, const Pose& pose, const std::string& frame_name) :
        m_id{id},
        m_pose{pose},
        m_frame_name{frame_name}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_setPose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(9)) {
        return false;
    }
    if (!writer.writeTag("setPose", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_setPose_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_enableGravity_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_enableGravity_helper(const std::string& id, const bool enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    bool m_enable;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_enableGravity_helper::s_return_helper = {};

WorldInterfaceServer_enableGravity_helper::WorldInterfaceServer_enableGravity_helper(const std::string& id, const bool enable) :
        m_id{id},
        m_enable{enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_enableGravity_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("enableGravity", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.writeBool(m_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_enableGravity_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_enableCollision_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_enableCollision_helper(const std::string& id, const bool enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    bool m_enable;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_enableCollision_helper::s_return_helper = {};

WorldInterfaceServer_enableCollision_helper::WorldInterfaceServer_enableCollision_helper(const std::string& id, const bool enable) :
        m_id{id},
        m_enable{enable}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_enableCollision_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("enableCollision", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.writeBool(m_enable)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_enableCollision_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_getPose_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_getPose_helper(const std::string& id, const std::string& frame_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    std::string m_frame_name;

    thread_local static Pose s_return_helper;
};

thread_local Pose WorldInterfaceServer_getPose_helper::s_return_helper = {};

WorldInterfaceServer_getPose_helper::WorldInterfaceServer_getPose_helper(const std::string& id, const std::string& frame_name) :
        m_id{id},
        m_frame_name{frame_name}
{
}

bool WorldInterfaceServer_getPose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("getPose", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.writeString(m_frame_name)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_getPose_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_loadModelFromFile_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_loadModelFromFile_helper(const std::string& filename);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_filename;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_loadModelFromFile_helper::s_return_helper = {};

WorldInterfaceServer_loadModelFromFile_helper::WorldInterfaceServer_loadModelFromFile_helper(const std::string& filename) :
        m_filename{filename}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_loadModelFromFile_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("loadModelFromFile", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_filename)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_loadModelFromFile_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_loadModelFromFileWithPose_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_loadModelFromFileWithPose_helper(const std::string& filename, const Pose& pose, const std::string& object_name, const double timeout);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_filename;
    Pose m_pose;
    std::string m_object_name;
    double m_timeout;

    thread_local static std::string s_return_helper;
};

thread_local std::string WorldInterfaceServer_loadModelFromFileWithPose_helper::s_return_helper = {};

WorldInterfaceServer_loadModelFromFileWithPose_helper::WorldInterfaceServer_loadModelFromFileWithPose_helper(const std::string& filename, const Pose& pose, const std::string& object_name, const double timeout) :
        m_filename{filename},
        m_pose{pose},
        m_object_name{object_name},
        m_timeout{timeout}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_loadModelFromFileWithPose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(10)) {
        return false;
    }
    if (!writer.writeTag("loadModelFromFileWithPose", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_filename)) {
        return false;
    }
    if (!writer.write(m_pose)) {
        return false;
    }
    if (!writer.writeString(m_object_name)) {
        return false;
    }
    if (!writer.writeFloat64(m_timeout)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_loadModelFromFileWithPose_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readString(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_deleteObject_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_deleteObject_helper(const std::string& id);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_deleteObject_helper::s_return_helper = {};

WorldInterfaceServer_deleteObject_helper::WorldInterfaceServer_deleteObject_helper(const std::string& id) :
        m_id{id}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_deleteObject_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("deleteObject", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_deleteObject_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_deleteAll_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_deleteAll_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_deleteAll_helper::s_return_helper = {};

WorldInterfaceServer_deleteAll_helper::WorldInterfaceServer_deleteAll_helper()
{
    s_return_helper = {};
}

bool WorldInterfaceServer_deleteAll_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("deleteAll", 1, 1)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_deleteAll_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_getList_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_getList_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::vector<std::string> s_return_helper;
};

thread_local std::vector<std::string> WorldInterfaceServer_getList_helper::s_return_helper = {};

WorldInterfaceServer_getList_helper::WorldInterfaceServer_getList_helper()
{
}

bool WorldInterfaceServer_getList_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getList", 1, 1)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_getList_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    s_return_helper.clear();
    uint32_t _size0;
    yarp::os::idl::WireState _etype3;
    reader.readListBegin(_etype3, _size0);
    s_return_helper.resize(_size0);
    for (size_t _i4 = 0; _i4 < _size0; ++_i4) {
        if (!reader.readString(s_return_helper[_i4])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

class WorldInterfaceServer_attach_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_attach_helper(const std::string& id, const std::string& link_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;
    std::string m_link_name;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_attach_helper::s_return_helper = {};

WorldInterfaceServer_attach_helper::WorldInterfaceServer_attach_helper(const std::string& id, const std::string& link_name) :
        m_id{id},
        m_link_name{link_name}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_attach_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("attach", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    if (!writer.writeString(m_link_name)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_attach_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_detach_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_detach_helper(const std::string& id);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_id;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_detach_helper::s_return_helper = {};

WorldInterfaceServer_detach_helper::WorldInterfaceServer_detach_helper(const std::string& id) :
        m_id{id}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_detach_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("detach", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_id)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_detach_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class WorldInterfaceServer_rename_helper :
        public yarp::os::Portable
{
public:
    explicit WorldInterfaceServer_rename_helper(const std::string& old_name, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_old_name;
    std::string m_new_name;

    thread_local static bool s_return_helper;
};

thread_local bool WorldInterfaceServer_rename_helper::s_return_helper = {};

WorldInterfaceServer_rename_helper::WorldInterfaceServer_rename_helper(const std::string& old_name, const std::string& new_name) :
        m_old_name{old_name},
        m_new_name{new_name}
{
    s_return_helper = {};
}

bool WorldInterfaceServer_rename_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("rename", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_old_name)) {
        return false;
    }
    if (!writer.writeString(m_new_name)) {
        return false;
    }
    return true;
}

bool WorldInterfaceServer_rename_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
WorldInterfaceServer::WorldInterfaceServer()
{
    yarp().setOwner(*this);
}

std::string WorldInterfaceServer::makeSphere(const double radius, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)
{
    WorldInterfaceServer_makeSphere_helper helper{radius, pose, color, frame_name, object_name, gravity_enable, collision_enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string WorldInterfaceServer::makeSphere(const double radius, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_makeSphere_helper::s_return_helper : std::string{};
}

std::string WorldInterfaceServer::makeBox(const double width, const double height, const double thickness, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)
{
    WorldInterfaceServer_makeBox_helper helper{width, height, thickness, pose, color, frame_name, object_name, gravity_enable, collision_enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string WorldInterfaceServer::makeBox(const double width, const double height, const double thickness, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_makeBox_helper::s_return_helper : std::string{};
}

std::string WorldInterfaceServer::makeCylinder(const double radius, const double length, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)
{
    WorldInterfaceServer_makeCylinder_helper helper{radius, length, pose, color, frame_name, object_name, gravity_enable, collision_enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string WorldInterfaceServer::makeCylinder(const double radius, const double length, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_makeCylinder_helper::s_return_helper : std::string{};
}

std::string WorldInterfaceServer::makeFrame(const double size, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)
{
    WorldInterfaceServer_makeFrame_helper helper{size, pose, color, frame_name, object_name, gravity_enable, collision_enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string WorldInterfaceServer::makeFrame(const double size, const Pose& pose, const Color& color, const std::string& frame_name, const std::string& object_name, const bool gravity_enable, const bool collision_enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_makeFrame_helper::s_return_helper : std::string{};
}

bool WorldInterfaceServer::changeColor(const std::string& id, const Color& color)
{
    WorldInterfaceServer_changeColor_helper helper{id, color};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::changeColor(const std::string& id, const Color& color)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_changeColor_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::setPose(const std::string& id, const Pose& pose, const std::string& frame_name)
{
    WorldInterfaceServer_setPose_helper helper{id, pose, frame_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::setPose(const std::string& id, const Pose& pose, const std::string& frame_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_setPose_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::enableGravity(const std::string& id, const bool enable)
{
    WorldInterfaceServer_enableGravity_helper helper{id, enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::enableGravity(const std::string& id, const bool enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_enableGravity_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::enableCollision(const std::string& id, const bool enable)
{
    WorldInterfaceServer_enableCollision_helper helper{id, enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::enableCollision(const std::string& id, const bool enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_enableCollision_helper::s_return_helper : bool{};
}

Pose WorldInterfaceServer::getPose(const std::string& id, const std::string& frame_name)
{
    WorldInterfaceServer_getPose_helper helper{id, frame_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "Pose WorldInterfaceServer::getPose(const std::string& id, const std::string& frame_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_getPose_helper::s_return_helper : Pose{};
}

bool WorldInterfaceServer::loadModelFromFile(const std::string& filename)
{
    WorldInterfaceServer_loadModelFromFile_helper helper{filename};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::loadModelFromFile(const std::string& filename)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_loadModelFromFile_helper::s_return_helper : bool{};
}

std::string WorldInterfaceServer::loadModelFromFileWithPose(const std::string& filename, const Pose& pose, const std::string& object_name, const double timeout)
{
    WorldInterfaceServer_loadModelFromFileWithPose_helper helper{filename, pose, object_name, timeout};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::string WorldInterfaceServer::loadModelFromFileWithPose(const std::string& filename, const Pose& pose, const std::string& object_name, const double timeout)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_loadModelFromFileWithPose_helper::s_return_helper : std::string{};
}

bool WorldInterfaceServer::deleteObject(const std::string& id)
{
    WorldInterfaceServer_deleteObject_helper helper{id};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::deleteObject(const std::string& id)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_deleteObject_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::deleteAll()
{
    WorldInterfaceServer_deleteAll_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::deleteAll()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_deleteAll_helper::s_return_helper : bool{};
}

std::vector<std::string> WorldInterfaceServer::getList()
{
    WorldInterfaceServer_getList_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::vector<std::string> WorldInterfaceServer::getList()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_getList_helper::s_return_helper : std::vector<std::string>{};
}

bool WorldInterfaceServer::attach(const std::string& id, const std::string& link_name)
{
    WorldInterfaceServer_attach_helper helper{id, link_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::attach(const std::string& id, const std::string& link_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_attach_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::detach(const std::string& id)
{
    WorldInterfaceServer_detach_helper helper{id};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::detach(const std::string& id)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_detach_helper::s_return_helper : bool{};
}

bool WorldInterfaceServer::rename(const std::string& old_name, const std::string& new_name)
{
    WorldInterfaceServer_rename_helper helper{old_name, new_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool WorldInterfaceServer::rename(const std::string& old_name, const std::string& new_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? WorldInterfaceServer_rename_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> WorldInterfaceServer::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("makeSphere");
        helpString.emplace_back("makeBox");
        helpString.emplace_back("makeCylinder");
        helpString.emplace_back("makeFrame");
        helpString.emplace_back("changeColor");
        helpString.emplace_back("setPose");
        helpString.emplace_back("enableGravity");
        helpString.emplace_back("enableCollision");
        helpString.emplace_back("getPose");
        helpString.emplace_back("loadModelFromFile");
        helpString.emplace_back("loadModelFromFileWithPose");
        helpString.emplace_back("deleteObject");
        helpString.emplace_back("deleteAll");
        helpString.emplace_back("getList");
        helpString.emplace_back("attach");
        helpString.emplace_back("detach");
        helpString.emplace_back("rename");
        helpString.emplace_back("help");
    } else {
        if (functionName == "makeSphere") {
            helpString.emplace_back("std::string makeSphere(const double radius, const Pose& pose, const Color& color, const std::string& frame_name = \"\", const std::string& object_name = \"\", const bool gravity_enable = 0, const bool collision_enable = 1) ");
            helpString.emplace_back("Make a sphere. ");
            helpString.emplace_back("@param radius radius of the sphere [m] ");
            helpString.emplace_back("@param pose pose of the sphere [m] ");
            helpString.emplace_back("@param color color of the sphere ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@param object_name (optional) assigns a name to the object. ");
            helpString.emplace_back("@param gravity_enable (optional) enables gravity (default false) ");
            helpString.emplace_back("@param collision_enable (optional) enables collision (default true) ");
            helpString.emplace_back("@return returns a string that contains the name of the object in the world ");
        }
        if (functionName == "makeBox") {
            helpString.emplace_back("std::string makeBox(const double width, const double height, const double thickness, const Pose& pose, const Color& color, const std::string& frame_name = \"\", const std::string& object_name = \"\", const bool gravity_enable = 0, const bool collision_enable = 1) ");
            helpString.emplace_back("Make a box. ");
            helpString.emplace_back("@param width box width [m] ");
            helpString.emplace_back("@param height box height[m] ");
            helpString.emplace_back("@param thickness box thickness [m] ");
            helpString.emplace_back("@param pose pose of the box [m] ");
            helpString.emplace_back("@param color color of the box ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@param object_name (optional) assigns a name to the object. ");
            helpString.emplace_back("@param gravity_enable (optional) enables gravity (default false) ");
            helpString.emplace_back("@param collision_enable (optional) enables collision (default true) ");
            helpString.emplace_back("@return returns a string that contains the name of the object in the world ");
        }
        if (functionName == "makeCylinder") {
            helpString.emplace_back("std::string makeCylinder(const double radius, const double length, const Pose& pose, const Color& color, const std::string& frame_name = \"\", const std::string& object_name = \"\", const bool gravity_enable = 0, const bool collision_enable = 1) ");
            helpString.emplace_back("Make a cylinder. ");
            helpString.emplace_back("@param radius radius of the cylinder [m] ");
            helpString.emplace_back("@param length length of the cylinder [m] ");
            helpString.emplace_back("@param pose pose of the cylinder [m] ");
            helpString.emplace_back("@param color color of the cylinder ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@param object_name (optional) assigns a name to the object. ");
            helpString.emplace_back("@param gravity_enable (optional) enables gravity (default false) ");
            helpString.emplace_back("@param collision_enable (optional) enables collision (default true) ");
            helpString.emplace_back("@return returns a string that contains the name of the object in the world ");
        }
        if (functionName == "makeFrame") {
            helpString.emplace_back("std::string makeFrame(const double size, const Pose& pose, const Color& color, const std::string& frame_name = \"\", const std::string& object_name = \"\", const bool gravity_enable = 0, const bool collision_enable = 1) ");
            helpString.emplace_back("Make a reference frame. ");
            helpString.emplace_back("@param size size of the frame [m] ");
            helpString.emplace_back("@param pose pose of the frame [m] ");
            helpString.emplace_back("@param color color of the frame ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@param object_name (optional) assigns a name to the object. ");
            helpString.emplace_back("@param gravity_enable (optional) enables gravity (default false) ");
            helpString.emplace_back("@param collision_enable (optional) enables collision (default true) ");
            helpString.emplace_back("@return returns a string that contains the name of the object in the world ");
        }
        if (functionName == "changeColor") {
            helpString.emplace_back("bool changeColor(const std::string& id, const Color& color) ");
            helpString.emplace_back("Change the color of an object ");
            helpString.emplace_back("@param id object id ");
            helpString.emplace_back("@param color color of the frame ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "setPose") {
            helpString.emplace_back("bool setPose(const std::string& id, const Pose& pose, const std::string& frame_name = \"\") ");
            helpString.emplace_back("Set new object pose. ");
            helpString.emplace_back("@param id object id ");
            helpString.emplace_back("@param pose new pose ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "enableGravity") {
            helpString.emplace_back("bool enableGravity(const std::string& id, const bool enable) ");
            helpString.emplace_back("Enable/disables gravity for an object ");
            helpString.emplace_back("@param id object id ");
            helpString.emplace_back("@param enable 1 to enable gravity, 0 otherwise ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "enableCollision") {
            helpString.emplace_back("bool enableCollision(const std::string& id, const bool enable) ");
            helpString.emplace_back("Enable/disables collision detection for an object ");
            helpString.emplace_back("@param id object id ");
            helpString.emplace_back("@param enable 1 to enable collision detection, 0 otherwise ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "getPose") {
            helpString.emplace_back("Pose getPose(const std::string& id, const std::string& frame_name = \"\") ");
            helpString.emplace_back("Get object pose. ");
            helpString.emplace_back("@param id string that identifies object in gazebo (returned after creation) ");
            helpString.emplace_back("@param frame_name (optional) is specified, the pose will be relative to the specified fully scoped frame (e.g. MODEL_ID::FRAME_ID). Otherwise, world it will be used. ");
            helpString.emplace_back("@return returns value of the pose in the world reference frame ");
        }
        if (functionName == "loadModelFromFile") {
            helpString.emplace_back("bool loadModelFromFile(const std::string& filename) ");
            helpString.emplace_back("Load a model from file. ");
            helpString.emplace_back("@param filename string that specifies the name of the model ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "loadModelFromFileWithPose") {
            helpString.emplace_back("std::string loadModelFromFileWithPose(const std::string& filename, const Pose& pose, const std::string& object_name = \"\", const double timeout = 2) ");
            helpString.emplace_back("Load a model from file. ");
            helpString.emplace_back("@param filename string that specifies the name of the model ");
            helpString.emplace_back("@param pose pose to place the model at: position (x,y,z), orientation (roll, pitch, yaw)] ");
            helpString.emplace_back("@param timeout (optional) time for the creation of the model [s] ");
            helpString.emplace_back("@return returns a string that contains the name of the model in the world ");
        }
        if (functionName == "deleteObject") {
            helpString.emplace_back("bool deleteObject(const std::string& id) ");
            helpString.emplace_back("Delete an object. ");
            helpString.emplace_back("@param id string that identifies object in gazebo (returned after creation) ");
            helpString.emplace_back("@return returns true/false on success failure. ");
        }
        if (functionName == "deleteAll") {
            helpString.emplace_back("bool deleteAll() ");
            helpString.emplace_back("Delete all objects in the world. ");
        }
        if (functionName == "getList") {
            helpString.emplace_back("std::vector<std::string> getList() ");
            helpString.emplace_back("List id of all objects that have been added to the world. ");
            helpString.emplace_back("@return return a list of string containing the id of the objects ");
        }
        if (functionName == "attach") {
            helpString.emplace_back("bool attach(const std::string& id, const std::string& link_name) ");
            helpString.emplace_back("Attach an object to a link of the robot. ");
            helpString.emplace_back("@param id string that identifies object in gazebo (returned after creation) ");
            helpString.emplace_back("@param link_name name of a link of the robot ");
            helpString.emplace_back("@return true if success, false otherwise ");
        }
        if (functionName == "detach") {
            helpString.emplace_back("bool detach(const std::string& id) ");
            helpString.emplace_back("Detach a previously attached object. ");
            helpString.emplace_back("@param id string that identifies object in gazebo (returned after creation) ");
            helpString.emplace_back("@return true if success, false otherwise ");
        }
        if (functionName == "rename") {
            helpString.emplace_back("bool rename(const std::string& old_name, const std::string& new_name) ");
            helpString.emplace_back("Change the names of an object. ");
            helpString.emplace_back("@param old_name string that identifies object in gazebo ");
            helpString.emplace_back("@param new_name string that will be used as new name ");
            helpString.emplace_back("@return true if success, false otherwise ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool WorldInterfaceServer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "makeSphere") {
            double radius;
            Pose pose;
            Color color;
            std::string frame_name;
            std::string object_name;
            bool gravity_enable;
            bool collision_enable;
            if (!reader.readFloat64(radius)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.read(color)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            if (!reader.readString(object_name)) {
                object_name = "";
            }
            if (!reader.readBool(gravity_enable)) {
                gravity_enable = 0;
            }
            if (!reader.readBool(collision_enable)) {
                collision_enable = 1;
            }
            WorldInterfaceServer_makeSphere_helper::s_return_helper = makeSphere(radius, pose, color, frame_name, object_name, gravity_enable, collision_enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(WorldInterfaceServer_makeSphere_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "makeBox") {
            double width;
            double height;
            double thickness;
            Pose pose;
            Color color;
            std::string frame_name;
            std::string object_name;
            bool gravity_enable;
            bool collision_enable;
            if (!reader.readFloat64(width)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(height)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(thickness)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.read(color)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            if (!reader.readString(object_name)) {
                object_name = "";
            }
            if (!reader.readBool(gravity_enable)) {
                gravity_enable = 0;
            }
            if (!reader.readBool(collision_enable)) {
                collision_enable = 1;
            }
            WorldInterfaceServer_makeBox_helper::s_return_helper = makeBox(width, height, thickness, pose, color, frame_name, object_name, gravity_enable, collision_enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(WorldInterfaceServer_makeBox_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "makeCylinder") {
            double radius;
            double length;
            Pose pose;
            Color color;
            std::string frame_name;
            std::string object_name;
            bool gravity_enable;
            bool collision_enable;
            if (!reader.readFloat64(radius)) {
                reader.fail();
                return false;
            }
            if (!reader.readFloat64(length)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.read(color)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            if (!reader.readString(object_name)) {
                object_name = "";
            }
            if (!reader.readBool(gravity_enable)) {
                gravity_enable = 0;
            }
            if (!reader.readBool(collision_enable)) {
                collision_enable = 1;
            }
            WorldInterfaceServer_makeCylinder_helper::s_return_helper = makeCylinder(radius, length, pose, color, frame_name, object_name, gravity_enable, collision_enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(WorldInterfaceServer_makeCylinder_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "makeFrame") {
            double size;
            Pose pose;
            Color color;
            std::string frame_name;
            std::string object_name;
            bool gravity_enable;
            bool collision_enable;
            if (!reader.readFloat64(size)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.read(color)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            if (!reader.readString(object_name)) {
                object_name = "";
            }
            if (!reader.readBool(gravity_enable)) {
                gravity_enable = 0;
            }
            if (!reader.readBool(collision_enable)) {
                collision_enable = 1;
            }
            WorldInterfaceServer_makeFrame_helper::s_return_helper = makeFrame(size, pose, color, frame_name, object_name, gravity_enable, collision_enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(WorldInterfaceServer_makeFrame_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "changeColor") {
            std::string id;
            Color color;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.read(color)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_changeColor_helper::s_return_helper = changeColor(id, color);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_changeColor_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setPose") {
            std::string id;
            Pose pose;
            std::string frame_name;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            WorldInterfaceServer_setPose_helper::s_return_helper = setPose(id, pose, frame_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_setPose_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "enableGravity") {
            std::string id;
            bool enable;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.readBool(enable)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_enableGravity_helper::s_return_helper = enableGravity(id, enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_enableGravity_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "enableCollision") {
            std::string id;
            bool enable;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.readBool(enable)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_enableCollision_helper::s_return_helper = enableCollision(id, enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_enableCollision_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getPose") {
            std::string id;
            std::string frame_name;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(frame_name)) {
                frame_name = "";
            }
            WorldInterfaceServer_getPose_helper::s_return_helper = getPose(id, frame_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(6)) {
                    return false;
                }
                if (!writer.write(WorldInterfaceServer_getPose_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "loadModelFromFile") {
            std::string filename;
            if (!reader.readString(filename)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_loadModelFromFile_helper::s_return_helper = loadModelFromFile(filename);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_loadModelFromFile_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "loadModelFromFileWithPose") {
            std::string filename;
            Pose pose;
            std::string object_name;
            double timeout;
            if (!reader.readString(filename)) {
                reader.fail();
                return false;
            }
            if (!reader.read(pose)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(object_name)) {
                object_name = "";
            }
            if (!reader.readFloat64(timeout)) {
                timeout = 2;
            }
            WorldInterfaceServer_loadModelFromFileWithPose_helper::s_return_helper = loadModelFromFileWithPose(filename, pose, object_name, timeout);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString(WorldInterfaceServer_loadModelFromFileWithPose_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "deleteObject") {
            std::string id;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_deleteObject_helper::s_return_helper = deleteObject(id);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_deleteObject_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "deleteAll") {
            WorldInterfaceServer_deleteAll_helper::s_return_helper = deleteAll();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_deleteAll_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getList") {
            WorldInterfaceServer_getList_helper::s_return_helper = getList();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_STRING, static_cast<uint32_t>(WorldInterfaceServer_getList_helper::s_return_helper.size()))) {
                    return false;
                }
                for (const auto& _item5 : WorldInterfaceServer_getList_helper::s_return_helper) {
                    if (!writer.writeString(_item5)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "attach") {
            std::string id;
            std::string link_name;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(link_name)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_attach_helper::s_return_helper = attach(id, link_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_attach_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "detach") {
            std::string id;
            if (!reader.readString(id)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_detach_helper::s_return_helper = detach(id);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_detach_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "rename") {
            std::string old_name;
            std::string new_name;
            if (!reader.readString(old_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(new_name)) {
                reader.fail();
                return false;
            }
            WorldInterfaceServer_rename_helper::s_return_helper = rename(old_name, new_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(WorldInterfaceServer_rename_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace GazeboYarpPlugins
