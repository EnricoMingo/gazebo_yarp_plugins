/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <GazeboYarpPlugins/Color.h>

namespace GazeboYarpPlugins {

// Default constructor
Color::Color() :
        WirePortable(),
        r(0),
        g(0),
        b(0)
{
}

// Constructor with field values
Color::Color(const std::int16_t r,
             const std::int16_t g,
             const std::int16_t b) :
        WirePortable(),
        r(r),
        g(g),
        b(b)
{
}

// Read structure on a Wire
bool Color::read(yarp::os::idl::WireReader& reader)
{
    if (!read_r(reader)) {
        return false;
    }
    if (!read_g(reader)) {
        return false;
    }
    if (!read_b(reader)) {
        return false;
    }
    return !reader.isError();
}

// Read structure on a Connection
bool Color::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(3)) {
        return false;
    }
    return read(reader);
}

// Write structure on a Wire
bool Color::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_r(writer)) {
        return false;
    }
    if (!write_g(writer)) {
        return false;
    }
    if (!write_b(writer)) {
        return false;
    }
    return !writer.isError();
}

// Write structure on a Connection
bool Color::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    return write(writer);
}

// Convert to a printable string
std::string Color::toString() const
{
    yarp::os::Bottle b;
    b.read(*this);
    return b.toString();
}

// Editor: default constructor
Color::Editor::Editor()
{
    group = 0;
    obj_owned = true;
    obj = new Color;
    dirty_flags(false);
    yarp().setOwner(*this);
}

// Editor: constructor with base class
Color::Editor::Editor(Color& obj)
{
    group = 0;
    obj_owned = false;
    edit(obj, false);
    yarp().setOwner(*this);
}

// Editor: destructor
Color::Editor::~Editor()
{
    if (obj_owned) {
        delete obj;
    }
}

// Editor: edit
bool Color::Editor::edit(Color& obj, bool dirty)
{
    if (obj_owned) {
        delete this->obj;
    }
    this->obj = &obj;
    obj_owned = false;
    dirty_flags(dirty);
    return true;
}

// Editor: validity check
bool Color::Editor::isValid() const
{
    return obj != nullptr;
}

// Editor: state
Color& Color::Editor::state()
{
    return *obj;
}

// Editor: grouping begin
void Color::Editor::start_editing()
{
    group++;
}

// Editor: grouping end
void Color::Editor::stop_editing()
{
    group--;
    if (group == 0 && is_dirty) {
        communicate();
    }
}
// Editor: r setter
void Color::Editor::set_r(const std::int16_t r)
{
    will_set_r();
    obj->r = r;
    mark_dirty_r();
    communicate();
    did_set_r();
}

// Editor: r getter
std::int16_t Color::Editor::get_r() const
{
    return obj->r;
}

// Editor: r will_set
bool Color::Editor::will_set_r()
{
    return true;
}

// Editor: r did_set
bool Color::Editor::did_set_r()
{
    return true;
}

// Editor: g setter
void Color::Editor::set_g(const std::int16_t g)
{
    will_set_g();
    obj->g = g;
    mark_dirty_g();
    communicate();
    did_set_g();
}

// Editor: g getter
std::int16_t Color::Editor::get_g() const
{
    return obj->g;
}

// Editor: g will_set
bool Color::Editor::will_set_g()
{
    return true;
}

// Editor: g did_set
bool Color::Editor::did_set_g()
{
    return true;
}

// Editor: b setter
void Color::Editor::set_b(const std::int16_t b)
{
    will_set_b();
    obj->b = b;
    mark_dirty_b();
    communicate();
    did_set_b();
}

// Editor: b getter
std::int16_t Color::Editor::get_b() const
{
    return obj->b;
}

// Editor: b will_set
bool Color::Editor::will_set_b()
{
    return true;
}

// Editor: b did_set
bool Color::Editor::did_set_b()
{
    return true;
}

// Editor: clean
void Color::Editor::clean()
{
    dirty_flags(false);
}

// Editor: read
bool Color::Editor::read(yarp::os::ConnectionReader& connection)
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        return false;
    }
    int len = reader.getLength();
    if (len == 0) {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(1)) {
            return false;
        }
        writer.writeString("send: 'help' or 'patch (param1 val1) (param2 val2)'");
        return true;
    }
    std::string tag;
    if (!reader.readString(tag)) {
        return false;
    }
    if (tag == "help") {
        yarp::os::idl::WireWriter writer(reader);
        if (writer.isNull()) {
            return true;
        }
        if (!writer.writeListHeader(2)) {
            return false;
        }
        if (!writer.writeTag("many", 1, 0)) {
            return false;
        }
        if (reader.getLength() > 0) {
            std::string field;
            if (!reader.readString(field)) {
                return false;
            }
            if (field == "r") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::int16_t r")) {
                    return false;
                }
            }
            if (field == "g") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::int16_t g")) {
                    return false;
                }
            }
            if (field == "b") {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeString("std::int16_t b")) {
                    return false;
                }
            }
        }
        if (!writer.writeListHeader(4)) {
            return false;
        }
        writer.writeString("*** Available fields:");
        writer.writeString("r");
        writer.writeString("g");
        writer.writeString("b");
        return true;
    }
    bool nested = true;
    bool have_act = false;
    if (tag != "patch") {
        if (((len - 1) % 2) != 0) {
            return false;
        }
        len = 1 + ((len - 1) / 2);
        nested = false;
        have_act = true;
    }
    for (int i = 1; i < len; ++i) {
        if (nested && !reader.readListHeader(3)) {
            return false;
        }
        std::string act;
        std::string key;
        if (have_act) {
            act = tag;
        } else if (!reader.readString(act)) {
            return false;
        }
        if (!reader.readString(key)) {
            return false;
        }
        if (key == "r") {
            will_set_r();
            if (!obj->nested_read_r(reader)) {
                return false;
            }
            did_set_r();
        } else if (key == "g") {
            will_set_g();
            if (!obj->nested_read_g(reader)) {
                return false;
            }
            did_set_g();
        } else if (key == "b") {
            will_set_b();
            if (!obj->nested_read_b(reader)) {
                return false;
            }
            did_set_b();
        } else {
            // would be useful to have a fallback here
        }
    }
    reader.accept();
    yarp::os::idl::WireWriter writer(reader);
    if (writer.isNull()) {
        return true;
    }
    writer.writeListHeader(1);
    writer.writeVocab32('o', 'k');
    return true;
}

// Editor: write
bool Color::Editor::write(yarp::os::ConnectionWriter& connection) const
{
    if (!isValid()) {
        return false;
    }
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(dirty_count + 1)) {
        return false;
    }
    if (!writer.writeString("patch")) {
        return false;
    }
    if (is_dirty_r) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("r")) {
            return false;
        }
        if (!obj->nested_write_r(writer)) {
            return false;
        }
    }
    if (is_dirty_g) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("g")) {
            return false;
        }
        if (!obj->nested_write_g(writer)) {
            return false;
        }
    }
    if (is_dirty_b) {
        if (!writer.writeListHeader(3)) {
            return false;
        }
        if (!writer.writeString("set")) {
            return false;
        }
        if (!writer.writeString("b")) {
            return false;
        }
        if (!obj->nested_write_b(writer)) {
            return false;
        }
    }
    return !writer.isError();
}

// Editor: send if possible
void Color::Editor::communicate()
{
    if (group != 0) {
        return;
    }
    if (yarp().canWrite()) {
        yarp().write(*this);
        clean();
    }
}

// Editor: mark dirty overall
void Color::Editor::mark_dirty()
{
    is_dirty = true;
}

// Editor: r mark_dirty
void Color::Editor::mark_dirty_r()
{
    if (is_dirty_r) {
        return;
    }
    dirty_count++;
    is_dirty_r = true;
    mark_dirty();
}

// Editor: g mark_dirty
void Color::Editor::mark_dirty_g()
{
    if (is_dirty_g) {
        return;
    }
    dirty_count++;
    is_dirty_g = true;
    mark_dirty();
}

// Editor: b mark_dirty
void Color::Editor::mark_dirty_b()
{
    if (is_dirty_b) {
        return;
    }
    dirty_count++;
    is_dirty_b = true;
    mark_dirty();
}

// Editor: dirty_flags
void Color::Editor::dirty_flags(bool flag)
{
    is_dirty = flag;
    is_dirty_r = flag;
    is_dirty_g = flag;
    is_dirty_b = flag;
    dirty_count = flag ? 3 : 0;
}

// read r field
bool Color::read_r(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(r)) {
        reader.fail();
        return false;
    }
    return true;
}

// write r field
bool Color::write_r(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(r)) {
        return false;
    }
    return true;
}

// read (nested) r field
bool Color::nested_read_r(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(r)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) r field
bool Color::nested_write_r(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(r)) {
        return false;
    }
    return true;
}

// read g field
bool Color::read_g(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(g)) {
        reader.fail();
        return false;
    }
    return true;
}

// write g field
bool Color::write_g(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(g)) {
        return false;
    }
    return true;
}

// read (nested) g field
bool Color::nested_read_g(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(g)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) g field
bool Color::nested_write_g(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(g)) {
        return false;
    }
    return true;
}

// read b field
bool Color::read_b(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(b)) {
        reader.fail();
        return false;
    }
    return true;
}

// write b field
bool Color::write_b(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(b)) {
        return false;
    }
    return true;
}

// read (nested) b field
bool Color::nested_read_b(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI16(b)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) b field
bool Color::nested_write_b(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(b)) {
        return false;
    }
    return true;
}

} // namespace GazeboYarpPlugins
