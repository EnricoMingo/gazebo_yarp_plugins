/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <GazeboYarpPlugins/LinkAttacherServer.h>

#include <yarp/os/idl/WireTypes.h>

namespace GazeboYarpPlugins {

class LinkAttacherServer_enableGravity_helper :
        public yarp::os::Portable
{
public:
    explicit LinkAttacherServer_enableGravity_helper(const std::string& model_name, const bool enable);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_model_name;
    bool m_enable;

    thread_local static bool s_return_helper;
};

thread_local bool LinkAttacherServer_enableGravity_helper::s_return_helper = {};

LinkAttacherServer_enableGravity_helper::LinkAttacherServer_enableGravity_helper(const std::string& model_name, const bool enable) :
        m_model_name{model_name},
        m_enable{enable}
{
    s_return_helper = {};
}

bool LinkAttacherServer_enableGravity_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("enableGravity", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_model_name)) {
        return false;
    }
    if (!writer.writeBool(m_enable)) {
        return false;
    }
    return true;
}

bool LinkAttacherServer_enableGravity_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class LinkAttacherServer_attachUnscoped_helper :
        public yarp::os::Portable
{
public:
    explicit LinkAttacherServer_attachUnscoped_helper(const std::string& model_name, const std::string& model_link_name, const std::string& robot_name, const std::string& robot_link_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_model_name;
    std::string m_model_link_name;
    std::string m_robot_name;
    std::string m_robot_link_name;

    thread_local static bool s_return_helper;
};

thread_local bool LinkAttacherServer_attachUnscoped_helper::s_return_helper = {};

LinkAttacherServer_attachUnscoped_helper::LinkAttacherServer_attachUnscoped_helper(const std::string& model_name, const std::string& model_link_name, const std::string& robot_name, const std::string& robot_link_name) :
        m_model_name{model_name},
        m_model_link_name{model_link_name},
        m_robot_name{robot_name},
        m_robot_link_name{robot_link_name}
{
    s_return_helper = {};
}

bool LinkAttacherServer_attachUnscoped_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("attachUnscoped", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_model_name)) {
        return false;
    }
    if (!writer.writeString(m_model_link_name)) {
        return false;
    }
    if (!writer.writeString(m_robot_name)) {
        return false;
    }
    if (!writer.writeString(m_robot_link_name)) {
        return false;
    }
    return true;
}

bool LinkAttacherServer_attachUnscoped_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class LinkAttacherServer_detachUnscoped_helper :
        public yarp::os::Portable
{
public:
    explicit LinkAttacherServer_detachUnscoped_helper(const std::string& model_name, const std::string& model_link_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_model_name;
    std::string m_model_link_name;

    thread_local static bool s_return_helper;
};

thread_local bool LinkAttacherServer_detachUnscoped_helper::s_return_helper = {};

LinkAttacherServer_detachUnscoped_helper::LinkAttacherServer_detachUnscoped_helper(const std::string& model_name, const std::string& model_link_name) :
        m_model_name{model_name},
        m_model_link_name{model_link_name}
{
    s_return_helper = {};
}

bool LinkAttacherServer_detachUnscoped_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("detachUnscoped", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_model_name)) {
        return false;
    }
    if (!writer.writeString(m_model_link_name)) {
        return false;
    }
    return true;
}

bool LinkAttacherServer_detachUnscoped_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
LinkAttacherServer::LinkAttacherServer()
{
    yarp().setOwner(*this);
}

bool LinkAttacherServer::enableGravity(const std::string& model_name, const bool enable)
{
    LinkAttacherServer_enableGravity_helper helper{model_name, enable};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool LinkAttacherServer::enableGravity(const std::string& model_name, const bool enable)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? LinkAttacherServer_enableGravity_helper::s_return_helper : bool{};
}

bool LinkAttacherServer::attachUnscoped(const std::string& model_name, const std::string& model_link_name, const std::string& robot_name, const std::string& robot_link_name)
{
    LinkAttacherServer_attachUnscoped_helper helper{model_name, model_link_name, robot_name, robot_link_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool LinkAttacherServer::attachUnscoped(const std::string& model_name, const std::string& model_link_name, const std::string& robot_name, const std::string& robot_link_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? LinkAttacherServer_attachUnscoped_helper::s_return_helper : bool{};
}

bool LinkAttacherServer::detachUnscoped(const std::string& model_name, const std::string& model_link_name)
{
    LinkAttacherServer_detachUnscoped_helper helper{model_name, model_link_name};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool LinkAttacherServer::detachUnscoped(const std::string& model_name, const std::string& model_link_name)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? LinkAttacherServer_detachUnscoped_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> LinkAttacherServer::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("enableGravity");
        helpString.emplace_back("attachUnscoped");
        helpString.emplace_back("detachUnscoped");
        helpString.emplace_back("help");
    } else {
        if (functionName == "enableGravity") {
            helpString.emplace_back("bool enableGravity(const std::string& model_name, const bool enable) ");
            helpString.emplace_back("Enable/disables gravity for a model ");
            helpString.emplace_back("@param model_name name that identifies model in gazebo (that are already spawned in gazebo) ");
            helpString.emplace_back("@param enable 1 to enable gravity, 0 otherwise ");
            helpString.emplace_back("@return returns true or false on success failure ");
        }
        if (functionName == "attachUnscoped") {
            helpString.emplace_back("bool attachUnscoped(const std::string& model_name, const std::string& model_link_name, const std::string& robot_name, const std::string& robot_link_name) ");
            helpString.emplace_back("Attach any link of the models spawned in gazebo to a link of the robot using a fixed joint. ");
            helpString.emplace_back("@param model_name name that identifies model in gazebo (that are already spawned in gazebo) ");
            helpString.emplace_back("@param model_link_name name of a the link in the model you want to attach to the robot ");
            helpString.emplace_back("@param robot_name name of the robot ");
            helpString.emplace_back("@param robot_link_name name of the robot link to which you want to attached the model link ");
            helpString.emplace_back("@return true if success, false otherwise ");
        }
        if (functionName == "detachUnscoped") {
            helpString.emplace_back("bool detachUnscoped(const std::string& model_name, const std::string& model_link_name) ");
            helpString.emplace_back("Detach the model link which was previously attached to the robot link through a fixed joint. ");
            helpString.emplace_back("@param model_name name that identifies model in gazebo (that are already spawned in gazebo) ");
            helpString.emplace_back("@param model_link_name name of a the link in the model that is attached to the robot ");
            helpString.emplace_back("@return true if success, false otherwise ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool LinkAttacherServer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "enableGravity") {
            std::string model_name;
            bool enable;
            if (!reader.readString(model_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readBool(enable)) {
                reader.fail();
                return false;
            }
            LinkAttacherServer_enableGravity_helper::s_return_helper = enableGravity(model_name, enable);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(LinkAttacherServer_enableGravity_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "attachUnscoped") {
            std::string model_name;
            std::string model_link_name;
            std::string robot_name;
            std::string robot_link_name;
            if (!reader.readString(model_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(model_link_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(robot_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(robot_link_name)) {
                reader.fail();
                return false;
            }
            LinkAttacherServer_attachUnscoped_helper::s_return_helper = attachUnscoped(model_name, model_link_name, robot_name, robot_link_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(LinkAttacherServer_attachUnscoped_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "detachUnscoped") {
            std::string model_name;
            std::string model_link_name;
            if (!reader.readString(model_name)) {
                reader.fail();
                return false;
            }
            if (!reader.readString(model_link_name)) {
                reader.fail();
                return false;
            }
            LinkAttacherServer_detachUnscoped_helper::s_return_helper = detachUnscoped(model_name, model_link_name);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(LinkAttacherServer_detachUnscoped_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace GazeboYarpPlugins
