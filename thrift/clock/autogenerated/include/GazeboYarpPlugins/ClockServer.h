/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_CLOCKSERVER_H
#define YARP_THRIFT_GENERATOR_SERVICE_CLOCKSERVER_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace GazeboYarpPlugins {

class ClockServer :
        public yarp::os::Wire
{
public:
    // Constructor
    ClockServer();

    /**
     * Pause the simulation if it was running
     */
    virtual void pauseSimulation();

    /**
     * Resume the simulation if it was paused
     */
    virtual void continueSimulation();

    /**
     * Steps the simulation for the provided number of steps.
     * The input parameter is the number of steps, not the time (Usually 1 step = 1ms but this is not guaranteed)
     * @note: this function (will be) not blocking, i.e. it will return immediately. Currently calling this function
     * twice before the previous call actually ends its computation gives and undefined behavior.
     * @param numberOfSteps number of steps to simulate
     */
    virtual void stepSimulation(const std::int32_t numberOfSteps = 1);

    /**
     * Steps the simulation for the provided number of steps.
     * The input parameter is the number of steps, not the time (Usually 1 step = 1ms but this is not guaranteed)
     * @note: this function is blocking
     * @param numberOfSteps number of steps to simulate
     */
    virtual void stepSimulationAndWait(const std::int32_t numberOfSteps = 1);

    /**
     * Reset the simulation time back to zero
     */
    virtual void resetSimulationTime();

    /**
     * Get the current simulation time
     * @return the simulation time.
     */
    virtual double getSimulationTime();

    /**
     * Get the current step size in seconds.
     * @return the step size in seconds
     */
    virtual double getStepSize();

    /**
     * Reset the simulation state and time
     */
    virtual void resetSimulation();

    /**
     * Reset the simulation state back to initial pose
     */
    virtual void resetSimulationState();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

} // namespace GazeboYarpPlugins

#endif // YARP_THRIFT_GENERATOR_SERVICE_CLOCKSERVER_H
